# Staging deployments are handled by:
# BCHouse - Vercel
# Paygate - Vercel
# CMS - Fly.io
# SQL Server - Fly.io
# Typesense - Fly.io

# Actions after successful deployment of staging environment when changed:
# 1) E2E Tests

name: Staging Deploy
on:
  push:
    branches:
      - staging
jobs:
  paths-filter:
    runs-on: ubuntu-latest
    outputs:
      bchouse: ${{ steps.filter.outputs.bchouse }}
      paygate: ${{ steps.filter.outputs.paygate }}
      cms: ${{ steps.filter.outputs.cms }}
      sql_server: ${{ steps.filter.outputs.sql_server }}
      typesense: ${{ steps.filter.outputs.typesense }}
      e2e: ${{ steps.filter.outputs.e2e }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: staging
          filters: |
            bchouse:
              - './apps/bchouse/**'
              - './packages/cashconnect/**'
              - './packages/inngest/**'
              - './packages/utils/**'
            paygate:
              - './apps/paygate/**'
              - './packages/inngest/**'
              - './packages/utils/**'
            cms:
              - './apps/cms/**'
            sql_server:
              - './apps/sql_server/**'
            typesense:
              - './apps/typesense/**'
            e2e:
              - './apps/e2e/**'

  bchouse:
    name: Deploy BCHouse to Vercel
    environment: staging
    needs: paths-filter
    if: needs.paths-filter.outputs.bchouse == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Link BCHouse to Vercel
        run: vercel link -p bchouse-site -y --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy BCHouse to Vercel
        # run: echo deploy_url=$(vercel deploy --prod -y --token=${{ secrets.VERCEL_TOKEN }}) >> $GITHUB_OUTPUT
        run: vercel --token=${{ secrets.VERCEL_TOKEN }} alias $(vercel deploy -y --token=${{ secrets.VERCEL_TOKEN }}) ${{vars.BCHOUSE_DOMAIN}}

  paygate:
    name: Deploy Paygate to Vercel
    environment: staging
    needs: paths-filter
    if: needs.paths-filter.outputs.paygate == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Link Paygate to Vercel
        run: vercel link -p bchouse-paygate -y --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Paygate to Vercel
        # run: echo deploy_url=$(vercel deploy --prod -y --token=${{ secrets.VERCEL_TOKEN }}) >> $GITHUB_OUTPUT
        run: vercel --token=${{ secrets.VERCEL_TOKEN }} alias $(vercel deploy -y --token=${{ secrets.VERCEL_TOKEN }}) ${{vars.PAYGATE_DOMAIN}}

  cms:
    name: Deploy CMS to fly.io
    environment: staging
    needs: paths-filter
    if: needs.paths-filter.outputs.cms == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy ./apps/cms -a bchouse-staging-cms -e BCHOUSE_URL="${{ vars.BCHOUSE_URL }}" -e UMBRACO_URL="${{ vars.UMBRACO_URL }}"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  sql_server:
    name: Deploy SQL Server to fly.io
    environment: staging
    needs: paths-filter
    if: needs.paths-filter.outputs.sql_server == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy ./apps/sql_server -a bchouse-staging-cms-sqlserver
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  typesense:
    name: Deploy Typesense to fly.io
    environment: staging
    needs: paths-filter
    if: needs.paths-filter.outputs.typesense == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy ./apps/typesense -a bchouse-staging-typesense
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  e2e:
    environment: staging
    name: E2E Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [paths-filter, bchouse, paygate, cms, sql_server, typesense]
    # Run e2e tests when no failures or cancellations and either one of the deployments succeed or the e2e test suite was updated
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'cancelled') && (contains(needs.*.result, 'success') || needs.paths-filter.outputs.e2e == 'true') }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install PNPM
        run: npm install -g pnpm
      - name: Install dependencies
        run: pnpm --filter @bchouse/e2e install
      - name: Install Playwright Browsers
        run: pnpm --filter @bchouse/e2e exec playwright install --with-deps
      - name: Run Playwright tests
        run: pnpm --filter @bchouse/e2e exec playwright test
        env:
          NODE_ENV: 'development'
          BCHOUSE_URL: ${{ vars.BCHOUSE_URL }}
          PAYGATE_URL: ${{ vars.PAYGATE_URL }}
          UMBRACO_URL: ${{ vars.UMBRACO_URL }}
          E2E_TEST_USERNAME: ${{ vars.E2E_TEST_USERNAME }}
          E2E_TEST_USER_BCH_ADDRESS: ${{ vars.E2E_TEST_USER_BCH_ADDRESS }}
          E2E_TEST_USER_PASSWORD: ${{ secrets.E2E_TEST_USER_PASSWORD }}
