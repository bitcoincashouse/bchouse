pragma cashscript ^0.8.0;

// Assurance smart contract which can have unlimited paricipants with option to cancel at any time
// first input pledger should be p2pkh to allow for cancel at any time in cancelOrRefund.cash
//  - Platform participation is required for all actions during campaign to reduce polling/unexpected changes.
//  - Platform is not required post-expiration

// Opcode count: xxx (max xxx)
// Bytesize: xxx (max xxx)

contract campaignMain(
  bytes20 platformPkh,
  int fundraisingGoal,
  int fundraisingExpires,
  bytes payoutBytecode, // either 25 bytes for P2PKH output or 23 bytes for P2SH
) {

  function payout() {
    // require the contract input to be on index 0 to read its value
    require(this.activeInputIndex == 0);
    // require that atleast fundraising goal is reached
    require(tx.outputs[0].value >= fundraisingGoal - 2000);
    // require payout value to be the contract value minus miner fee
    require(tx.outputs[0].value == tx.inputs[0].value - 1000);
    // payout can either be to P2PKH or P2SH address
    require(tx.outputs[0].lockingBytecode == payoutBytecode);
    // require the campaign is burned (TODO: require change if a pledge takes campaign over)
    require(tx.outputs[0].tokenCategory == 0x);
  }

  function pledge(pubkey platformPk, sig platformSig) {
    require(hash160(platformPk) == platformPkh);
    require(checkSig(platformSig, platformPk));

    // require pledge input to be spent at index 0
    require(this.activeInputIndex == 0);
    // require there to be at leaast 2 inputs
    require(tx.inputs.length >= 2);
    // require outputs <= 3 so no additional NFTs can be minted
    require(tx.outputs.length <= 3);

    bytes campaignCategoryId = tx.inputs[0].tokenCategory.split(32)[0];
    // require pledge contract to be spent with correct campaign at index 0
    require(tx.outputs[0].tokenCategory == campaignCategoryId + 0x02);
    // require campaign contract bytecode replicated on output index 0
    require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
    // require campaign contract category replicated on output index 0
    require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
    // require campaign fundds increase by an amount
    // require(tx.outputs[0].value - tx.inputs[0].value >= 10000);
    
    // require that it does not mint a *minting* NFTs
    require(tx.outputs[1].tokenCategory == campaignCategoryId);

    // require the nft committment to contain correct pledge (payout address not our concern)
    int refundCommitmentAmount = int(tx.outputs[1].nftCommitment.split(8)[0]);
    int pledgeAmount = tx.outputs[0].value - tx.inputs[0].value;
    require(refundCommitmentAmount == pledgeAmount);

    // if there is a change output
    if (tx.outputs.length == 3) {
      // require that it does not mint *any* NFTs
      require(tx.outputs[2].tokenCategory == 0x);
    }
  }

  function refundBeforeExpiration(pubkey platformPk, sig platformSig) {
    require(hash160(platformPk) == platformPkh);
    require(checkSig(platformSig, platformPk));

    // require pledge input to be spent at index 0
    require(this.activeInputIndex == 0);
    // require there to be only 2 outputs so no additional NFTs can be minted
    require(tx.outputs.length == 2);
    
    bytes campaignCategoryId = tx.inputs[0].tokenCategory.split(32)[0];
    // require pledge contract to be spent with correct campaign at index 0
    require(tx.inputs[0].tokenCategory == campaignCategoryId + 0x02);
    // require campaign contract bytecode replicated on output index 0
    require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
    // require campaign contract category replicated on output index 0
    require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
    // require valid refund NFT as input, validate by checking the tokenCategory without capability
    require(tx.inputs[1].tokenCategory == campaignCategoryId);
    
    int refundCommitmentAmount = int(tx.inputs[1].nftCommitment.split(8)[0]);
    int refundAmount = tx.inputs[0].value - tx.outputs[0].value;
    // require campaign balance to decrease by refund amount
    require(refundAmount <= refundCommitmentAmount);
    
    // refund output on index 1 minus tx fee
    bytes refundLockingBytecode = tx.inputs[1].nftCommitment.split(8)[1];
    require(tx.outputs[1].lockingBytecode == refundLockingBytecode);
    require(tx.outputs[1].value >= refundCommitmentAmount - 2000);
    // require that the refund NFT is burned
    require(tx.outputs[1].tokenCategory == 0x);
  }

  function refundAfterExpiration() {
    // require fundraiser to be expired
    require(tx.time >= fundraisingExpires);
    // require campaign contract to be spent at index 0
    require(this.activeInputIndex == 0);
    // require there to be only 2 outputs so no additional NFTs can be minted
    // TODO: allow 1 output if refund amount < refundCommitment amount
    require(tx.outputs.length == 2);
    
    bytes campaignCategoryId = tx.inputs[0].tokenCategory.split(32)[0];
    // require campaign contract to be spent with correct campaign at index 0
    require(tx.inputs[0].tokenCategory == campaignCategoryId + 0x02);
    // require campaign contract bytecode replicated on output index 0
    require(tx.outputs[0].lockingBytecode == tx.inputs[0].lockingBytecode);
    // require campaign contract category replicated on output index 0
    require(tx.outputs[0].tokenCategory == tx.inputs[0].tokenCategory);
    // require valid refund NFT as input, validate by checking the tokenCategory without capability
    require(tx.inputs[1].tokenCategory == campaignCategoryId);
    
    int refundCommitmentAmount = int(tx.inputs[1].nftCommitment.split(8)[0]);
    int refundAmount = tx.inputs[0].value - tx.outputs[0].value;
    // require campaign balance to decrease by refund amount
    require(refundAmount <= refundCommitmentAmount);
    
    // refund output on index 1 minus tx fee
    bytes refundLockingBytecode = tx.inputs[1].nftCommitment.split(8)[1];
    require(tx.outputs[1].lockingBytecode == refundLockingBytecode);
    require(tx.outputs[1].value >= refundCommitmentAmount - 2000);
    // require that the refund NFT is burned
    require(tx.outputs[1].tokenCategory == 0x);
  }
}